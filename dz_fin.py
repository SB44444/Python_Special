"""
üìå –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –ø—É—Ç—å –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ –ü–ö.
üìå –°–æ–±–µ—Ä–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º –≤ –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–æ–≤ namedtuple.
üìå –ö–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç —Ö—Ä–∞–Ω–∏—Ç:
‚óã –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞,
‚óã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª,
‚óã —Ñ–ª–∞–≥ –∫–∞—Ç–∞–ª–æ–≥–∞,
‚óã –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞.
üìå –í –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–±–æ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∏—Å–ø–æ–ª—å–∑—É—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ."""

import argparse
import csv
import json
import logging
import pickle
import os
from collections import namedtuple
from pathlib import Path


WorkStatus = namedtuple("WorkStatus", ["obj_name", "extension", "is_catalog", "parent_catalog"])


def mk_space(work_dir, work_name="new_file", work_size=220):
    """–§-—Ü–∏—è —Å–æ–∑–¥–∞—ë—Ç —Ñ–∞–π–ª –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö –∏ –ø—É—Ç—å –∫ –Ω–µ–º—É –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    if not os.path.exists(work_dir):
        os.makedirs(work_dir)
    file_path = os.path.join(work_dir, work_name)

    with open(file_path, 'wb') as file:
        file.write(b'\0' * work_size)


def get_work_size(work_path):
    """–§-—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ —É–∫–∞–∑–∞–Ω–æ–º—É –ø—É—Ç–∏"""
    total_size = 0
    for work_dirpath, work_dirnames, work_files in os.walk(work_path):
        for file in work_files:
            file_path = os.path.join(work_dirpath, file)
            total_size += os.path.getsize(file_path)
    return total_size


def save_directory_info(work_path):
    """–§-—Ü–∏—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –æ–±—Ö–æ–¥–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –≤–∫–ª—é—á–∞—è –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –≤—Å–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∏ –∏ —Ñ–∞–π–ª—ã.
    –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ñ–∞–π–ª—ã JSON, CSV –∏ pickle"""
    res_lst = []
    for work_dirpath, work_dirnames, work_files in os.walk(work_path, topdown=True, onerror=None, followlinks=False):
        work_dirinfo = {'path': work_dirpath, 'type': 'directory', 'size': get_work_size(work_dirpath)}
        res_lst.append(work_dirinfo)
        for file in work_files:
            file_path = os.path.join(work_dirpath, file)
            file_info = {'path': file_path, 'type': 'file', 'size': os.path.getsize(file_path)}
            res_lst.append(file_info)
    save_path = os.path.join(os.path.dirname(work_path), os.path.basename(work_path))

    with open(f'{save_path}.json', 'w') as json_file:
        json.dump(res_lst, json_file, indent=4)

    with open(f'{save_path}.csv', 'w', newline='') as csv_file:
        writer = csv.writer(csv_file)
        writer.writerow(['path', 'type', 'size'])
        for result in res_lst:
            writer.writerow([result['path'], result['type'], result['size']])

    with open(f'{save_path}.pickle', 'wb') as pickle_file:
        pickle.dump(res_lst, pickle_file)


def read_results_to_json(fl_name: str):
    with open(fl_name, 'r', newline='', encoding='UTF-8') as fl:
        data_jsn = json.load(fl)
        data_jsn_out = [row_pcl for row_pcl in data_jsn]
    return data_jsn_out


def read_results_to_pickle(fl_name: str):
    with open(fl_name, 'rb') as f:
        data_pcl = pickle.load(f)
        data_pcl_out = [row_pcl for row_pcl in data_pcl]
    return data_pcl_out


def read_results_to_csv(fl_name: str):
    with open(fl_name, 'r', newline='') as f:
        data_csv = csv.reader(f)
        data_csv_out = [row for row in data_csv]
    return data_csv_out


def reserching(work_path):
    """–§-—Ü–∏—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –æ–±—Ö–æ–¥–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –≤–∫–ª—é—á–∞—è –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –≤—Å–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ. –î–æ–±–∞–≤–ª—è–µ—Ç –≤ —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏—è –∞—Ä–≥—É–º–Ω—Ç–æ–≤"""
    res_lst_r = []
    for work_dirpath, work_dirnames, work_files in os.walk(work_path, topdown=True, onerror=None, followlinks=False):
        obj_name = os.path.basename(work_dirpath)

        parent_catalog = os.path.dirname(work_dirpath)
        res_lst_r.append(WorkStatus(obj_name, None, True, parent_catalog))
        for file in work_files:
            file_path = os.path.join(work_dirpath, file)
            parent_catalog = os.path.dirname(file_path)
            if "." in file:
                file_extension, *file_name = file.split(".")
                file_name = ".".join(file_name)
            else:
                file_name = file
                file_extension = None
            res_lst_r.append(WorkStatus(file_name, file_extension, False, parent_catalog))

    return res_lst_r


def create_log(work_path):
    """ –§-—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –ª–æ–≥–∞ –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    log_file_name = str(os.path.basename(work_path) + ".log")
    work_log_name = os.path.join(os.path.dirname(work_path), log_file_name)

    logging.basicConfig(
        filename=work_log_name, filemode='w', encoding='utf-8', level=logging.INFO, format='{levelname:<8} - {asctime}, {msg}', style='{')
    my_logger = logging.getLogger(__name__)
    res = reserching(work_path)
    for r in res:
        my_logger.info(r.__str__())


def create_drct():
    """ –§-—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    my_path = Path().cwd() / "my_dz_15" / "file_catalog"
    mk_space(my_path, "file_1")
    my_path = Path().cwd() / "my_dz_15" / "file_catalog" / "file_2"
    mk_space(my_path, "file_2", 1400)
    my_path = Path().cwd() / "my_dz_15" / "file_catalog" / "file_3"
    mk_space(my_path, "file_3", 520)
    mk_space(my_path, "file_4", 440)
    my_path = Path().cwd() / "my_dz_15" / "file_catalog"

    save_directory_info(my_path)
    print(*read_results_to_json('./my_dz_15/file_catalog.json'))


def main():
    parser = argparse.ArgumentParser(description="–°–æ–±–∏—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º –≤ –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–æ–≤ namedtuple.")
    parser.add_argument("folder", nargs="?", type=str, help="–£–∫–∞–∑–∞—Ç—å –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ")
    args = parser.parse_args()
    print(f'–í —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–¥–∞–Ω–æ: {args}')
    if os.path.exists(args.folder):
        create_log(args.folder)
    else:
        print("–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")


if __name__ == "__main__":
    # create_drct()
    main()
